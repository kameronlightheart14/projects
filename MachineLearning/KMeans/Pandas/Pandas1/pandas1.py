# -*- coding: utf-8 -*-
"""pandas1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13cMhzmkKbBIDMo_8tCyK5BPlquLgM3ZB

# Pandas 1

## Kameron Lightheart

## MATH 403 (Vol 3)

## 9/30/2019
"""

import numpy as np
import pandas as pd
#from google.colab import files

# Files needed
#     budget.csv
#     crime_data.csv
#uploaded = files.upload()

"""# Problem 1"""

def random_dataframe(d=None):
    """
    Generate a dictionary.
    Reset labels and return.

    Parameters:
    d (dict): dictionary to initialize DataFrame

    Return:
    csv: csv of DataFrame
    """
    if d is not None:
        df = pd.DataFrame(d)
    else:
        values = np.random.random((5,6))
        columns = ['A', 'B', 'C', 'D', 'E']
        index = ['I', 'II', 'III', 'IV', 'V', 'VI']
        df = pd.DataFrame(values, columns, index)
    return df.index, df.columns, df.values

# random_dataframe()

# values = np.random.random((5,6))
# columns = ['A', 'B', 'C', 'D', 'E']
# index = ['I', 'II', 'III', 'IV', 'V', 'VI']
# df = pd.DataFrame(values, columns, index)
# random_dataframe(df)

"""# Problem 2"""

# Prob 2
def prob2(file='budget.csv'):
    """
    Read in file as DataFrame. Manipulate data using
    Pandas commmands
    
    Parameters:
        file (str): name of datafile
        
    Return:
        values (ndarray): values of DataFrame
    """
    # Read in data
    df = pd.read_csv(file)
    
    # Get column names
    column_names = list(df)
    
    # Construct new order of column names
    order_indicies = [3, 0, 1, 2, 4, 5, 6, 7]
    new_order = [column_names[i] for i in order_indicies]
    
    # Reindex the DataFrame
    df = df.reindex(columns = new_order)
    
    # Sort on Groceries 
    df = df.sort_values('Groceries', ascending=False)
    
    # Reset all values in rent to 800
    df['Rent'] = 800 * np.ones_like(df['Rent']) 
    
    # Reset all values in first 5 rows to 0.0
    df[:5] = np.zeros_like(df.loc[28])
    
    return df.values

# prob2()



"""# Problem 3"""

def prob3(file='budget.csv'):
    """
    Read in data as Pandas DataFrame.
    Manipulate data and return DataFrame values.
    
    Parameters:
        file (str): data file
    
    Return:
        values (ndarray): values of DataFrame
    """
    # Read in data
    df = pd.read_csv(file)
    # Fill in nans with 0.0 
    df = df.fillna(0.0)
    df['Living Expenses'] = df['Rent'].values + df['Groceries'].values + df['Gas'].values\
                            + df['Utilities']
    df['Other'] = df['Dining Out'].values + df['Out With Friends'].values \
                            + df['Netflix']
    # Rent correlates most with living expenses, dining out for other
    corr = df.corr()
    
    means = df.mean()
    
    return (means['Rent'], means['Dining Out'])

# prob3()

"""# Problem 4"""

def prob4(file='crime_data.csv'):
    """
    Read in crime data and use SQL queries to gather certain data.
    
    Parameters:
        file (str): data
    
    Return:
        values (ndarray): values of DataFrame
    """
    df = pd.read_csv(file)
    df = df.set_index('Year')
    df['Rate'] = df['Total'].values / df['Population'].values
    mean_violence = df.Violent.mean()
    df = df[(df.Violent > mean_violence) & (df['Rate'] > 0.05)]
    num_murders = df['Murder']

    return num_murders.values

# prob4()

"""# Problem 5"""

def prob5(file = 'crime_data.csv'):
    """
    Read in crime data and use pandas to answer questions.
    
    Parameters:
        file (str): data
    
    Return:
        ans_1 (list): answer to Question 1
        ans_2 (ndarray): answer to Question 2
        ans_3 (float): answer to Question 3
    """
    # Read in the data
    df = pd.read_csv(file)
    # QUESTION 1
    # Compute the mean and correlation matrix
    means = df.mean(axis=0)
    # Three highest means are burlary, property and larceny
    means = means[means > 1_500_000]
    # Two most correlated are property and larceny
    correlations = df.corr()
    # Property has greatest max value
    ans1 = 'Property'
    
    # QUESTION 2
    recent_data = df[df['Year'] >= 2000]
    sorted_data = recent_data.sort_values('Murder')
    query_data = sorted_data[sorted_data['Aggravated Assault'] > 850_000]
    ans2 = query_data['Aggravated Assault'].values
    
    # QUESTION 3
    totals = df.groupby(df['Year'] // 10 * 10).sum().sort_values('Total', ascending=False).loc[1990]
    ans3 = float(totals['Property'] / totals['Total'])
    
    return [ans1, ans2, ans3]

# prob5()



